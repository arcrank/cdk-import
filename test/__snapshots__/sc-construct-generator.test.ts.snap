// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generate ai-health.json 1`] = `
"// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';
import * as sc from 'aws-cdk-lib/aws-servicecatalog';

export interface IAiPoweredHealthDataMasking extends cdk.IResource {
  readonly provisionedProductId: string;
  readonly cloudFormationStackArn: string;
  readonly recordId: string;
  readonly apiGatewayInvokeURL: string;
  readonly apiGatewayId: string;
  readonly apiGatewayStage: string;
  readonly imageBucketName: string;
  readonly logBucketName: string;
  readonly imageResourceId: string;
  readonly imageTextResourceId: string;
  readonly imagePhiResourceId: string;
  readonly imageMaskResourceId: string;
  readonly textPhiResourceId: string;
  readonly textMaskResourceId: string;
}

abstract class AiPoweredHealthDataMaskingBase extends cdk.Resource implements IAiPoweredHealthDataMasking {
  public abstract readonly provisionedProductId: string;
  public abstract readonly cloudFormationStackArn: string;
  public abstract readonly recordId: string;
  public abstract readonly apiGatewayInvokeURL: string;
  public abstract readonly apiGatewayId: string;
  public abstract readonly apiGatewayStage: string;
  public abstract readonly imageBucketName: string;
  public abstract readonly logBucketName: string;
  public abstract readonly imageResourceId: string;
  public abstract readonly imageTextResourceId: string;
  public abstract readonly imagePhiResourceId: string;
  public abstract readonly imageMaskResourceId: string;
  public abstract readonly textPhiResourceId: string;
  public abstract readonly textMaskResourceId: string;
}

/**
 * A Service Catalog CloudFormation \`AIPoweredHealthDataMasking\` product.
 *
 * @cloudformationResource AWS::ServiceCatalog::CloudFormationProvisionedProduct
 * @stability external
 */
export class AiPoweredHealthDataMasking extends AiPoweredHealthDataMaskingBase {
  /**
   * Attribute \`AIPoweredHealthDataMasking.provisionedProductId\`
   */
  public readonly provisionedProductId: string;
  /**
   * Attribute \`AIPoweredHealthDataMasking.cloudFormationStackArn\`
   */
  public readonly cloudFormationStackArn: string;
  /**
   * Attribute \`AIPoweredHealthDataMasking.recordId\`
   */
  public readonly recordId: string;
  /**
   * Attribute \`AIPoweredHealthDataMasking.apiGatewayInvokeURL\`
   */
  public readonly apiGatewayInvokeURL: string;
  /**
   * Attribute \`AIPoweredHealthDataMasking.apiGatewayId\`
   */
  public readonly apiGatewayId: string;
  /**
   * Attribute \`AIPoweredHealthDataMasking.apiGatewayStage\`
   */
  public readonly apiGatewayStage: string;
  /**
   * Attribute \`AIPoweredHealthDataMasking.imageBucketName\`
   */
  public readonly imageBucketName: string;
  /**
   * Attribute \`AIPoweredHealthDataMasking.logBucketName\`
   */
  public readonly logBucketName: string;
  /**
   * Attribute \`AIPoweredHealthDataMasking.imageResourceId\`
   */
  public readonly imageResourceId: string;
  /**
   * Attribute \`AIPoweredHealthDataMasking.imageTextResourceId\`
   */
  public readonly imageTextResourceId: string;
  /**
   * Attribute \`AIPoweredHealthDataMasking.imagePhiResourceId\`
   */
  public readonly imagePhiResourceId: string;
  /**
   * Attribute \`AIPoweredHealthDataMasking.imageMaskResourceId\`
   */
  public readonly imageMaskResourceId: string;
  /**
   * Attribute \`AIPoweredHealthDataMasking.textPhiResourceId\`
   */
  public readonly textPhiResourceId: string;
  /**
   * Attribute \`AIPoweredHealthDataMasking.textMaskResourceId\`
   */
  public readonly textMaskResourceId: string;
  private readonly provisionedProduct: sc.CfnCloudFormationProvisionedProduct;

  /**
   * Create a new Service Catalog \`AIPoweredHealthDataMasking\` product.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   */
  constructor(scope: constructs.Construct, id: string) {
    super(scope, id);

    this.provisionedProduct = new sc.CfnCloudFormationProvisionedProduct(this, 'Resource', {
      provisionedProductName: this.node.id,
      provisioningArtifactName: 'v1.0',
      productName: 'AI-Powered Health Data Masking',
    });

    this.provisionedProductId = this.provisionedProduct.ref;
    this.cloudFormationStackArn = cdk.Token.asString(cdk.Fn.getAtt(this.provisionedProduct.logicalId, 'CloudformationStackArn'));
    this.recordId = cdk.Token.asString(cdk.Fn.getAtt(this.provisionedProduct.logicalId, 'RecordId'));
    this.apiGatewayInvokeURL = cdk.Token.asString(cdk.Fn.getAtt(this.provisionedProduct.logicalId, 'Outputs.ApiGatewayInvokeURL'));
    this.apiGatewayId = cdk.Token.asString(cdk.Fn.getAtt(this.provisionedProduct.logicalId, 'Outputs.ApiGatewayId'));
    this.apiGatewayStage = cdk.Token.asString(cdk.Fn.getAtt(this.provisionedProduct.logicalId, 'Outputs.ApiGatewayStage'));
    this.imageBucketName = cdk.Token.asString(cdk.Fn.getAtt(this.provisionedProduct.logicalId, 'Outputs.ImageBucketName'));
    this.logBucketName = cdk.Token.asString(cdk.Fn.getAtt(this.provisionedProduct.logicalId, 'Outputs.LogBucketName'));
    this.imageResourceId = cdk.Token.asString(cdk.Fn.getAtt(this.provisionedProduct.logicalId, 'Outputs.ImageResourceId'));
    this.imageTextResourceId = cdk.Token.asString(cdk.Fn.getAtt(this.provisionedProduct.logicalId, 'Outputs.ImageTextResourceId'));
    this.imagePhiResourceId = cdk.Token.asString(cdk.Fn.getAtt(this.provisionedProduct.logicalId, 'Outputs.ImagePhiResourceId'));
    this.imageMaskResourceId = cdk.Token.asString(cdk.Fn.getAtt(this.provisionedProduct.logicalId, 'Outputs.ImageMaskResourceId'));
    this.textPhiResourceId = cdk.Token.asString(cdk.Fn.getAtt(this.provisionedProduct.logicalId, 'Outputs.TextPhiResourceId'));
    this.textMaskResourceId = cdk.Token.asString(cdk.Fn.getAtt(this.provisionedProduct.logicalId, 'Outputs.TextMaskResourceId'));
  }
}"
`;

exports[`generate bucket.json 1`] = `
"// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';
import * as sc from 'aws-cdk-lib/aws-servicecatalog';

export interface IBucketProduct extends cdk.IResource {
  readonly provisionedProductId: string;
  readonly cloudFormationStackArn: string;
  readonly recordId: string;
}

abstract class BucketProductBase extends cdk.Resource implements IBucketProduct {
  public abstract readonly provisionedProductId: string;
  public abstract readonly cloudFormationStackArn: string;
  public abstract readonly recordId: string;
}

/**
 * A Service Catalog CloudFormation \`BucketProduct\` product.
 *
 * @cloudformationResource AWS::ServiceCatalog::CloudFormationProvisionedProduct
 * @stability external
 */
export class BucketProduct extends BucketProductBase {
  /**
   * Attribute \`BucketProduct.provisionedProductId\`
   */
  public readonly provisionedProductId: string;
  /**
   * Attribute \`BucketProduct.cloudFormationStackArn\`
   */
  public readonly cloudFormationStackArn: string;
  /**
   * Attribute \`BucketProduct.recordId\`
   */
  public readonly recordId: string;
  private readonly provisionedProduct: sc.CfnCloudFormationProvisionedProduct;

  /**
   * Create a new Service Catalog \`BucketProduct\` product.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   */
  constructor(scope: constructs.Construct, id: string) {
    super(scope, id);

    this.provisionedProduct = new sc.CfnCloudFormationProvisionedProduct(this, 'Resource', {
      provisionedProductName: this.node.id,
      provisioningArtifactName: 'BucketProduct',
      productName: 'BucketProduct',
    });

    this.provisionedProductId = this.provisionedProduct.ref;
    this.cloudFormationStackArn = cdk.Token.asString(cdk.Fn.getAtt(this.provisionedProduct.logicalId, 'CloudformationStackArn'));
    this.recordId = cdk.Token.asString(cdk.Fn.getAtt(this.provisionedProduct.logicalId, 'RecordId'));
  }
}"
`;

exports[`generate ec2.json 1`] = `
"// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';
import * as sc from 'aws-cdk-lib/aws-servicecatalog';

export interface IEc2ComputeInstance extends cdk.IResource {
  readonly provisionedProductId: string;
  readonly cloudFormationStackArn: string;
  readonly recordId: string;
  readonly iPAddress: string;
  readonly downloadKeyCommand: string;
  readonly sshcommand: string;
}

abstract class Ec2ComputeInstanceBase extends cdk.Resource implements IEc2ComputeInstance {
  public abstract readonly provisionedProductId: string;
  public abstract readonly cloudFormationStackArn: string;
  public abstract readonly recordId: string;
  public abstract readonly iPAddress: string;
  public abstract readonly downloadKeyCommand: string;
  public abstract readonly sshcommand: string;
}

enum ParameterKeys {
  ssmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmarm64gp2C96584B6F00A464EAD1953AFF4B05118Parameter = 'SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmarm64gp2C96584B6F00A464EAD1953AFF4B05118Parameter',
  instanceType = 'InstanceType',
}

namespace ParameterKeys {
  const reverseMap = new Map<string, ParameterKeys>();
  Object.keys(ParameterKeys).forEach((s: string) => {
    const e = (<any>ParameterKeys)[s];
    reverseMap.set(s, e);
  });
  export function valueOf(str: string) {
    return reverseMap.get(str);
  }
}
export interface Ec2ComputeInstanceProps {
  /**
   *
   * @default /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2
   */
  readonly ssmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmarm64gp2C96584B6F00A464EAD1953AFF4B05118Parameter?: string;

  /**
   * The instance type of an EC2 instance.
   */
  readonly instanceType: string;

}

/**
 * A Service Catalog CloudFormation \`Ec2ComputeInstance\` product.
 *
 * @cloudformationResource AWS::ServiceCatalog::CloudFormationProvisionedProduct
 * @stability external
 */
export class Ec2ComputeInstance extends Ec2ComputeInstanceBase {
  /**
   * Attribute \`Ec2ComputeInstance.provisionedProductId\`
   */
  public readonly provisionedProductId: string;
  /**
   * Attribute \`Ec2ComputeInstance.cloudFormationStackArn\`
   */
  public readonly cloudFormationStackArn: string;
  /**
   * Attribute \`Ec2ComputeInstance.recordId\`
   */
  public readonly recordId: string;
  /**
   * Attribute \`Ec2ComputeInstance.iPAddress\`
   */
  public readonly iPAddress: string;
  /**
   * Attribute \`Ec2ComputeInstance.downloadKeyCommand\`
   */
  public readonly downloadKeyCommand: string;
  /**
   * Attribute \`Ec2ComputeInstance.sshcommand\`
   */
  public readonly sshcommand: string;
  private readonly provisionedProduct: sc.CfnCloudFormationProvisionedProduct;

  /**
   * Create a new Service Catalog \`Ec2ComputeInstance\` product.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: Ec2ComputeInstanceProps) {
    super(scope, id);

    this.provisionedProduct = new sc.CfnCloudFormationProvisionedProduct(this, 'Resource', {
      provisionedProductName: this.node.id,
      provisioningArtifactName: 'EC2LargeInstance',
      productName: 'Ec2ComputeInstance',
      provisioningParameters:
        Object.entries(props).map(([k, v]) => {
          return {
            key: ParameterKeys.valueOf(k) as string,
            value: v as string,
          }
        }),
    });

    this.provisionedProductId = this.provisionedProduct.ref;
    this.cloudFormationStackArn = cdk.Token.asString(cdk.Fn.getAtt(this.provisionedProduct.logicalId, 'CloudformationStackArn'));
    this.recordId = cdk.Token.asString(cdk.Fn.getAtt(this.provisionedProduct.logicalId, 'RecordId'));
    this.iPAddress = cdk.Token.asString(cdk.Fn.getAtt(this.provisionedProduct.logicalId, 'Outputs.IPAddress'));
    this.downloadKeyCommand = cdk.Token.asString(cdk.Fn.getAtt(this.provisionedProduct.logicalId, 'Outputs.DownloadKeyCommand'));
    this.sshcommand = cdk.Token.asString(cdk.Fn.getAtt(this.provisionedProduct.logicalId, 'Outputs.sshcommand'));
  }
}"
`;
